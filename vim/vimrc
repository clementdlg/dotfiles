""""""""""""""""""""""""""""""""""""""""""""""""""
" ENVIRONMENT

" check how many colors can support the terminal

function! MainEnv() 
    " no Vi-mode
    set nocompatible

    if $COLORTERM == 'truecolor'
        call TruecolorMode()

    elseif &t_Co == 256
        call TerminalMode()

    elseif &t_Co == 8
        call ConsoleMode()
    endif
endfunction

function! TruecolorMode()
    set termguicolors   " enable 24bit color support
    set mouse=a         " enable mouse support
    set relativenumber  " relative line numbers

    if ThemeExists("sorbet-night")
        colorscheme sorbet-night
    elseif ThemeExists("sorbet")
        colorscheme sorbet
    else
        colorscheme slate
    endif

endfunction

function! TerminalMode()
    set notermguicolors " disable 24bit color support
    set mouse=a         " enable mouse support
    set relativenumber  " relative line numbers

    if ThemeExists("sorbet-night")
        colorscheme sorbet-night
    else
        colorscheme slate
    endif

endfunction

function! ConsoleMode()
    set notermguicolors " disable 24bit color support
    set mouse=          " disable mouse support
    set norelativenumber " no relative line numbers
    colorscheme elflord
endfunction

function! ThemeExists(theme)
  let theme_path = globpath(&runtimepath, 'colors/' . a:theme . '.vim')

  if theme_path == ''
    return v:false
  endif
  return v:true
endfunction

call MainEnv()


""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS

"basics
set ignorecase                      " Ignore case search
set incsearch                       " Incremental search
set cursorline				        " Highlight current line
set scrolloff=10			        " Keep cursor centered
set clipboard=                      " Do not use system clipboard
set hidden				            " Switch between buffers
set backspace=indent,eol,start 		" Make backspace more powerful
set noshowmode                      " Do not show mode

" display
set number				            " Line numbers
set wildmenu				        " List completion for commands
set showcmd				            " Display command keystrokes
set wrap                            " Wrap lines that are too long
set linebreak                       " Wrap lines without cutting words
set signcolumn=yes                  " Add a column before line number

" graphics
syntax on                           " Syntax highlighting
" set background=dark                 " Black background
set lazyredraw				        " Do not redraw screen everytime

" file specific
set autoread				        " Read file changes (outside of vim)
set noswapfile                      " Disable swap file
filetype on                         " Detect filetype
filetype indent on                  " Base indentation filetype
filetype plugin on                  " Filetype specific operation
set encoding=utf-8                  " Global encoding
set fileencoding=utf-8              " Local encoding
set formatoptions+=ro               " Add comment header auto

" indent settings
set tabstop=4               		" Number of spaces tabs count for
set shiftwidth=4            		" Number of spaces to use for autoindent
set autoindent              		" Copy indent from current line when starting a new line
set smartindent             		" Smart autoindenting for C-like programs

" persistant undo
set undofile                        " Enable persistent undo
set undodir=~/.vim/undo.d           " Set undo directory

" netrw
let g:netrw_banner = 0              " Remove banner
let g:netrw_liststyle = 3           " File view
" let g:netrw_browse_split = 4        " Open file in previous window
let g:netrw_winsize = 30            " Width of netrw

" colors for split
set fillchars=vert:â”ƒ
hi VertSplit gui=bold guifg=#3f4766 cterm=bold ctermfg=cyan
hi CursorLineNr cterm=bold			" Line number in bold


""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUS LINE

" static status colors
set laststatus=2                                " Always display the status line
highlight Path   guifg=#c0caf5   guibg=#39415D ctermbg=60 ctermfg=15
highlight Git    guifg=#a6aed3   guibg=#292d45 ctermbg=242 ctermfg=15
highlight File   guifg=#a7aed3   guibg=#292d45 ctermbg=242 ctermfg=15

" define the color for the current mode
function! ColorModes()
    let currentMode = mode()
    let hlMode   = "highlight Mode    gui=bold guifg=black guibg="
    let hlCursor = "highlight Cursor1 gui=bold guifg=black guibg="
    let cterm    = " cterm=bold ctermfg=16 ctermbg="

    " possible modes
    let modes = ['n', 'i', 'R', 'V', 'v', "\<C-v>", 'c', 't']
    " colors to apply
    let colors = ['#7aa2f7', '#9ece6a', '#f7768e', '#bb9af7', '#bb9af7',  '#bb9af7', '#e0ac60', '#1abc9c']
    let termcolors = ['111', '156', '167', '141', '141',  '141', '215', '72']
    
    for i in range(0, 7)
        if currentMode ==# modes[i]
            execute hlMode . colors[i] . cterm . termcolors[i]
            execute hlCursor . colors[i] . cterm . termcolors[i]
            return i
        endif
    endfor
endfunction

" display verbose mode
" called in FullStatusline()
function! VerboseMode()
    let returnVal = ['Normal', 'Insert', 'Replace', 'V-Line', 'Visual',  'V-Block', 'Command', 'Terminal']
    return returnVal[ColorModes()]
endfunction

" display concise mode
" called in SmallStatusline()

function! FullStatusline()
    set statusline=%#Mode#\ %{VerboseMode()}\       " Mode names
    set statusline+=%#Path#\ %F\                    " Full file path
    set statusline+=%=%#Git#%{Git()}                  " git integration
    set statusline+=%#File#\ [%{&filetype}]\      " Filetype
    set statusline+=%#Cursor1#\ %l:%c\            " Line and column numbers
endfunction


call FullStatusline()

" Git branch display
" .git/HEAD is read to retrieve the branch name
function! Git()
    let head = '.git/HEAD'
    " check if in a git repo
    if !filereadable(head)
        return ''
    endif
    " HEAD min characters 
    if getfsize(head) < 16 
        return ''
    endif
    " reading HEAD
    let head = readfile(head)
    " parsing HEAD 
    if len(head) > 1 || stridx(head[0], 'ref: refs/heads/') == -1
        return ''
    else
        return ' git:' . strpart(head[0], 16)
    endif 
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""
"REMAPS

" leader key
let mapleader = " "

" source config file
nnoremap <silent> <leader>rc    :source %<CR>
" toggle Netrw
nnoremap <silent> <leader>e     :Lexplore<CR>
" buffer navigation
nnoremap <silent> <leader>n    :bnext<CR>
nnoremap <silent> <leader>p    :bprevious<CR>
nnoremap <silent> <leader>bd    :bdelete<CR>
nnoremap <Leader>l             :buffer 

" center screen on half page up/down
nnoremap <C-u>                  <C-u>zz
nnoremap <C-d>                  <C-d>zz

" scripting
nnoremap <leader>x              :!chmod +x %

" toggle cursorline when entering/leaving insert mode
autocmd InsertEnter,InsertLeave * set cursorline!
